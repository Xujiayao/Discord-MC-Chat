apply plugin: "com.gradleup.shadow"
apply plugin: "net.neoforged.moddev"

version = mod_version

base {
    archivesName = mod_name + "-common"
}

dependencies {
    shadow("net.dv8tion:JDA:5.6.1") {
        exclude module: "opus-java" // for encoding audio into opus
        exclude module: "tink" // for encrypting and decrypting audio
    }
}

neoForge {
    version = "21.8.23"
}

tasks.withType(JavaCompile).configureEach {
    options.release = 21
    options.encoding = "UTF-8"
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    manifest {
        attributes "Main-Class": "com.xujiayao.discord_mc_chat.common.DMCC"
    }
}

shadowJar {
    dependsOn assemble

    archiveClassifier.set("")
    configurations = [project.configurations.shadow]
    minimize()

    def commonJar = tasks.jar.archiveFile.get().asFile
    from(zipTree(commonJar)) {
        exclude 'META-INF/MANIFEST.MF'
    }
}

build {
    dependsOn shadowJar
}

//========== Merge JARs ==========

def otherSubprojects = rootProject.subprojects.findAll { it.name != project.name }

tasks.register("mergeJars") {
    dependsOn otherSubprojects.collect { ":$it.name:jar" }

    def commonJar = tasks.jar.archiveFile.get().asFile
    def tempDir = project.layout.buildDirectory.dir("merged_temp").get().asFile

    doLast {
        tempDir.mkdirs()
        def addedFiles = [:]
        otherSubprojects.each { subproj ->
            def jarFile = subproj.tasks.named("jar").get().archiveFile.get().asFile
            copy {
                from zipTree(jarFile)
                into tempDir
                exclude "META-INF/MANIFEST.MF"
                eachFile { fcd ->
                    def relPath = fcd.relativePath.toString()
                    if (addedFiles.containsKey(relPath)) {
                        logger.warn("Warning: Duplicate file found: $relPath in ${subproj.name} and ${addedFiles[relPath]}")
                    } else {
                        addedFiles[relPath] = subproj.name
                    }
                }
            }
        }
        // 将解压后的内容加入 common 的 jar
        ant.zip(update: "true", destfile: commonJar) {
            fileset(dir: tempDir)
        }
    }
}

// 保证 mergeJars 在 jar 之后执行
tasks.named("assemble").configure {
    dependsOn mergeJars
}
