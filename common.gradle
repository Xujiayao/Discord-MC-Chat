import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

apply plugin: "fabric-loom"
apply plugin: "com.replaymod.preprocess"

int mcVersion = project.mcVersion

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

version = mod_version
group = maven_group

base {
	archivesName = "${archives_base_name}-${minecraft_version}"
}

dependencies {
	minecraft("com.mojang:minecraft:${minecraft_version}")
	mappings(loom.officialMojangMappings())

	modImplementation("net.fabricmc:fabric-loader:${loader_version}")
	modApi("net.fabricmc.fabric-api:fabric-api:${fabric_version}")

	modImplementation("net.dv8tion:JDA:5.3.0") {
		exclude module: "opus-java"
	}
	modImplementation("net.sf.trove4j:core:3.1.0")
	modImplementation("org.apache.commons:commons-collections4:4.4")
	modImplementation("org.slf4j:slf4j-api:2.0.13")
	modImplementation("com.neovisionaries:nv-websocket-client:2.14")
	modImplementation("com.fasterxml.jackson.core:jackson-core:2.17.2")
	modImplementation("com.fasterxml.jackson.core:jackson-databind:2.17.2")
	modImplementation("com.fasterxml.jackson.core:jackson-annotations:2.17.2")
	modImplementation("com.squareup.okhttp3:okhttp:4.12.0")
	modImplementation("com.squareup.okio:okio-jvm:3.6.0")
	modImplementation("org.jetbrains.kotlin:kotlin-stdlib:1.8.21")

	modImplementation("net.fellbaum:jemoji:1.7.1")

	modImplementation("com.google.code.gson:gson:2.12.1")
}

processResources {
	filesMatching("fabric.mod.json") {
		def valueMap = [
				"mc_version": minecraft_version.replace(".", "_"),
				"version"   : mod_version
		]
		expand valueMap
	}

	doLast {
		ArrayList<?> minecraft_dependency = minecraft_dependency.split(",")

		File file = file("build/resources/main/fabric.mod.json")
		JsonSlurper slurper = new JsonSlurper()
		JsonBuilder builder = new JsonBuilder(slurper.parse(file))
		builder.content.depends.minecraft = minecraft_dependency
		BufferedWriter writer = file.newWriter()
		writer.append(builder.toPrettyString())
		writer.flush()
		writer.close()
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}