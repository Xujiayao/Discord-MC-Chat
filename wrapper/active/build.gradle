import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

apply plugin: "fabric-loom"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

version = mod_version
group = maven_group

base {
    archivesName = archives_base_name
}

sourceSets {
    main.resources.srcDir "../src/main/resources"
}

dependencies {
    minecraft("com.mojang:minecraft:${minecraft_version}")
    mappings(loom.officialMojangMappings())

    modImplementation("net.fabricmc:fabric-loader:${loader_version}")
    modApi("net.fabricmc.fabric-api:fabric-api:${fabric_version}")

    include("net.dv8tion:JDA:5.0.0-beta.18") {
        exclude module: "opus-java"
    }
    include("net.sf.trove4j:trove4j:3.0.3")
    include("org.apache.commons:commons-collections4:4.4")
    include("org.slf4j:slf4j-api:2.0.9") // 1.x is Incompatible with Quilt (#164)
    include("com.neovisionaries:nv-websocket-client:2.14")
    include("com.fasterxml.jackson.core:jackson-core:2.14.1")
    include("com.fasterxml.jackson.core:jackson-databind:2.14.1")
    include("com.fasterxml.jackson.core:jackson-annotations:2.14.1")
    include("com.squareup.okhttp3:okhttp:4.11.0") // Use 4.11.0 instead of 4.10.0 for cleaner logs
    include("com.squareup.okio:okio:2.10.0") // Cannot use okio-jvm (#55)
    include("org.jetbrains.kotlin:kotlin-stdlib:1.6.20")

    include("net.fellbaum:jemoji:1.3.3")

    include("com.google.code.gson:gson:2.10.1")
}

def fabric_subprojects = parent.subprojects.findAll({
    it.name != "active" && !it.name.contains("compat")
})

remapJar {
    outputs.upToDateWhen { false }

    dependsOn(fabric_subprojects.collect {
        it.tasks.remapJar
    })

    doFirst {
        delete fileTree("build/tmp/versions/META-INF/jars")
        copy {
            from {
                fabric_subprojects.collect {
                    it.tasks.remapJar.outputs.files
                }
            }
            into("build/tmp/versions/META-INF/jars")
        }
    }

    from("../../LICENSE") {
        rename { "${it}_${archives_base_name}" }
    }
    from("build/tmp/versions")
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": mod_version
    }

    doLast {
        ArrayList<?> minecraft_dependency = []
        ArrayList<?> jars = []

        fabric_subprojects.each({
            minecraft_dependency.addAll("${it.minecraft_dependency}".split(","))
            jars.add(["file": "META-INF/jars/MC-Discord-Chat-${it.minecraft_version}-${mod_version}.jar"])
        })

        File file = file("build/resources/main/fabric.mod.json")
        JsonSlurper slurper = new JsonSlurper()
        JsonBuilder builder = new JsonBuilder(slurper.parse(file))
        builder.content.depends.minecraft = minecraft_dependency
        builder.content.jars = jars
        BufferedWriter writer = file.newWriter()
        writer.append(builder.toPrettyString())
        writer.flush()
        writer.close()
    }
}

clean {
    delete file("../../build")
}